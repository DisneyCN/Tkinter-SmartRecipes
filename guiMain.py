
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from guiLogin import *
from guiRegister import *
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Listbox
import tkinter
from tkinter.messagebox import showinfo
import sqlite3
import requests 
import json
from tkinter import *
# Ne conectam la baza de date]
conn = sqlite3.connect('SmartRecipeDatabase1.db')
 
# Creem un cursor cursor 
cursor = conn.cursor()

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assetsMain\frame0")
import requests
def translateResponse(text,resultvar,language):
    

    url = "https://ai-translate.p.rapidapi.com/translates"

    payload = {
	"texts": [text],
	"tls": [language],
	"sl": "en"
    }
    headers = {
	"content-type": "application/json",
	"X-RapidAPI-Key": "75106fd62bmsh49d3626bea21183p1ad209jsn92329c88a3f6",
	"X-RapidAPI-Host": "ai-translate.p.rapidapi.com"
    }

    response = requests.post(url, json=payload, headers=headers)
    result = response.json()
    resultvar.set(result[0]['texts'])

    print(response.json())

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
recID = 0
def search_Recipe(entry_2,resultvar):
    global recID
    itemx=0
    print(entry_2.get())
    ingredients = ''
    mylist = entry_2.get().split()
        
    if len(mylist) <= 1 :
        resultvar.set('I need more than 1 ingredient :)')
    else :
        for i in range(len(mylist)-1):
            if i == 0:
                ingredients = mylist[0]
            else:
                ingredients += ';'+mylist[i] 
        
        url = "https://low-carb-recipes.p.rapidapi.com/search"
        querystring = {f"includeIngredients":{ingredients},"limit":"5"}

        headers = {
            "X-RapidAPI-Key": "75106fd62bmsh49d3626bea21183p1ad209jsn92329c88a3f6",
            "X-RapidAPI-Host": "low-carb-recipes.p.rapidapi.com"
        }
        response = requests.get(url, headers=headers, params=querystring)
        for ing in response.json():

                namevar = ing['name']
                ingvar = ing['ingredients']
                stepsvar = ing['steps']
                stepvar = ""
                for step in stepsvar:
                    stepvar += "\n " + step
                steps = stepvar.split(".")
                
                stepvar = ''
                for step in steps:
                    stepvar += "\n " + step    
                print(stepvar)

                list = []
                for i in ingvar:
                    list.append([i['name'],i['servingSize']['units'],i['servingSize']['qty']])
                cursor.execute(f'select recipeName from RecipeNames')
                allrecipes =  cursor.fetchall()
                if len(allrecipes) == 0:
                    # print((f"insert or ignore into RecipeNames(recipeName,recipeDescribe) values({namevar},{stepvar})"))
                    cursor.execute(f"insert or ignore into RecipeNames(recipeName,recipeDescribe) values('{namevar}','{stepvar}')")
                    conn.commit()
                    cursor.execute(f'select recipeID from RecipeNames  where recipeName = {namevar}')
                    recID = cursor.fetchone()
                else:
                    for recipe in allrecipes:
                        if recipe[0] != namevar:
                            cursor.execute(f"insert or ignore into RecipeNames(recipeName,recipeDescribe) values('{namevar}','{stepvar}')")
                            conn.commit()
                            cursor.execute(f"select recipeID from RecipeNames  where recipeName = '{namevar}'")
                            recID = cursor.fetchone()


                    for item in list:
                        cursor.execute(f"insert or ignore into Measures(measureName) values('{item[1]}')")
                        conn.commit()
                        item[0] =item[0].replace("'", "")
                        cursor.execute(f"insert or ignore into Ingredients(inName) values('{item[0]}')")
                        conn.commit()

                                
                        cursor.execute(f"select inID from Ingredients where inName = '{item[0]}'")
                        ingrID = cursor.fetchone()
                        cursor.execute(f"select measureID from Measures where measureName = '{item[1]}'")
                        measID = cursor.fetchone()
                        if recID ==0:
                            data_tuple= (recID,ingrID[0],measID[0],item[2])
                        else:
                            data_tuple= (recID[0],ingrID[0],measID[0],item[2])
                        # print(data_tuple)
                        interog ="insert or ignore into Meats(recipeId, inId, measureId, inCant) values(?,?,?,?)"
                        cursor.execute(interog,data_tuple)
                        conn.commit()


                cursor.execute(f"""
                        select i.inName,m.measureName,meat.inCant from Ingredients as i
                        inner join Meats as meat on i.inId=meat.inId
                        inner join Measures as m on m.measureId=meat.measureId
                        inner join RecipeNames as r on r.recipeId=meat.recipeId
                        where r.recipeName = '{namevar}'
                    """)
                ingredients =  cursor.fetchall()
                cursor.execute(f"select recipeDescribe from RecipeNames where recipeName = '{namevar}' ")
                text = ""
                for ing in ingredients:
                    text +=  f"\n {ing[0]} - {ing[2]}  {ing[1]}"
                resultvar.set(f'Ingredients : {text}\n Description : {stepvar}\n')

                        

            
                

                
def addIngs(listBox_1):
    cursor.execute('select inName from Ingredients')
    rows = cursor.fetchall()
    item =0
    for row in rows:
        item += 1
        listBox_1.insert(item,row[0])


def MainButton(button):
    button.config(command='')
def FavoritesButton(button):
    button.config(command='')

def DownloadButton(list):
    from fpdf import FPDF

    pdf = FPDF()
    
    pdf.add_page()
   
    pdf.set_font("Arial", size = 15)
    text = list.split('\n')
    for item in text:
        pdf.cell(150, 5, txt = item,ln = 1, align = 'L')
    

    # save the pdf with name .pdf
    pdf.output("yourRecipe.pdf")  

    with open('yourRecipe.txt', 'w') as f:
        f.write(list)

def MainF():
    window = Tk()

    window.geometry("1366x768")
    window.configure(bg = "#FFFFFF")


    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 768,
        width = 1366,
        bd = 0,
        highlightthickness = 0,
        relief = "flat"
    )
    # Patratul Oranj
    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        50.0,
        57.0,
        1316.0,
        725.0,
        fill="#F2E3DB",
        outline="")

    # Patratul cu lista de recete
    resultvar = tkinter.StringVar()
    entry_1 = Label(
        bd=0,
        bg="#CAE6CF",
        fg="#000716",
        highlightthickness=0,
        textvariable=resultvar,
        justify = "left",
        anchor="w"
    )
    entry_1.place(
        x=375.0,
        y=170.0,
        width=901.0,
        height=530.0
    )



    # Search Box
    # Search Image
    varSearch = tkinter.StringVar()
    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    entry_2 = Entry(
        bd=0,
        bg="#CAE6CF",
        fg="#000716",
        highlightthickness=0,
        textvariable= varSearch
    )
    entry_2.place(
        x=375.0,
        y=80.0,
        width=610.0,
        height=74.0
    )
    listBox_1 = Listbox(
        bd=0,
        bg="#81c78d",
        fg="#507b57",
        highlightthickness=0,
        selectmode=tkinter.EXTENDED
    )
    addIngs(listBox_1)
    listBox_1.place(
        x=984.0,
        y=80.0,
        width=200.0,
        height=74.0
    )

    def selectedItems(event):
        selectedItems = listBox_1.curselection()
        if listBox_1.get(selectedItems) not in entry_2.get().split():
            if len(entry_2.get()) == 0:
                varSearch.set(f'{listBox_1.get(selectedItems)}')
            else:
                varSearch.set(f'{entry_2.get()} {listBox_1.get(selectedItems)}')
        

    listBox_1.bind('<<ListboxSelect>>',selectedItems)

    canvas.create_text(
        100.0,
        92.0,
        anchor="nw",
        text="Smart Recipes",
        fill="#E86A33",
        font=("Basic Regular", 40 * -1)
    )
    #Search Button
    button_8 = Button(
        borderwidth=0,
        highlightthickness=0,
        relief="flat",
        text="Search",
        bg="#cae6cf",
        image=image_image_2,
        activebackground = "#cae6cf",
        command=lambda: search_Recipe(entry_2,resultvar)
        )
    button_8.place(
        x=1200.0,
        y=80.0,
        width=75.0,
        height=75.0
    )

    #Menu Grup Box

    #Imaginile pentru butoane

    # Favorites Button
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    # Main Button
    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    # Download Button
    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    # Log Out Button
    image_image_5 = PhotoImage(
        file=relative_to_assets("image_5.png"))
    # Dreptunghiul din meniu
    canvas.create_rectangle(
        100.0,
        170.0,
        360.0,
        700.0,
        fill="#CAE6CF",
        outline="")

    button_1 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_1 clicked"),
        relief="flat",
        text= "Main",
        bg="#cae6cf",
        activebackground = "#cae6cf"  
    )
    button_1.place(
        x=130.0,
        y=200.0,
        width=200.0,
        height=33.0
    )
    button_2 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_2 clicked"),
        relief="flat",
        text="Favorites",
        bg="#cae6cf",
        activebackground = "#cae6cf"
    )
    button_2.place(
        x=130.0,
        y=270.0,
        width=200.0,
        height=33.0
    )

    button_3 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: DownloadButton(entry_1.cget("text")),
        relief="flat",
        text= "Download",
        bg="#cae6cf",
        activebackground = "#cae6cf"
    )
    button_3.place(
        x=130.0,
        y=340.0,
        width=200.0,
        height=33.0
    )

    button_4 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: window.destroy(),
        relief="flat",
        text="Log Out",
        bg="#cae6cf",
        activebackground = "#cae6cf"
        )
    button_4.place(
        x=130.0,
        y=410.0,
        width=200.0,
        height=33.0
    )

    button_5 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_1 clicked"),
        relief="flat",
        text= "Main" ,
        bg="#cae6cf",
        image=image_image_3,
        activebackground = "#cae6cf"
        )
    button_5.place(
        x=120.0,
        y=195.0,
        width=40.0,
        height=40.0
    )

    button_6 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_2 clicked"),
        relief="flat",
        text="Favorites",
        bg="#cae6cf",
        image=image_image_1,
        activebackground = "#cae6cf"
    )
    button_6.place(
        x=120.0,
        y=265.0,
        width=40.0,
        height=40.0
    )

    button_7 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: DownloadButton(entry_1.cget("text")),
        relief="flat",
        text= "Download",
        bg="#cae6cf",
        image=image_image_4,
        activebackground = "#cae6cf"
    )
    button_7.place(
        x=120.0,
        y=335.0,
        width=40.0,
        height=40.0
    )

    button_8 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: window.destroy(),
        relief="flat",
        text="Log Out",
        bg="#cae6cf",
        image=image_image_5,
        activebackground = "#cae6cf"
        )
    button_8.place(
        x=120.0,
        y=405.0,
        width=40.0,
        height=40.0
    )
    entry_9 = Entry(
        borderwidth=0,
        highlightthickness=0,
        relief="flat",
        text="Translate",
        bg="#a5ffb4"
        )
    entry_9.place(
        x=120.0,
        y=455.0,
        width=170.0,
        height=40.0
    )

    button_9 = Button(
        borderwidth=0,
        highlightthickness=0,
        command=lambda: translateResponse(entry_1.cget("text"),resultvar,entry_9.get() ),
        relief="flat",
        text="Translate",
        bg="#81c78d",
        activebackground = "#cae6cf"
        )
    button_9.place(
        x=300.0,
        y=455.0,
        width=60.0,
        height=40.0
    )

    window.resizable(False, False)
    window.mainloop()

